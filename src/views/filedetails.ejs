<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<body>
<!-- File Details Section -->
<section>
    <div class="container mt-3">
        <form class="d-flex" role="search" id="searchForm">
            <input class="form-control me-3" type="search" placeholder="Search" id="searchInput" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
            <span class="ps-2">Total Rows: <%= file.data.length %></span>
        </form>
    </div>

    <h2 class="text-center mb-4">File Details - <%= file.name %></h2>
    <div class="table-responsive m-4">
        <table class="table table-hover table-dark">
            <thead>
                <tr>
                    <% Object.keys(file.data[0]).forEach(key => { %>
                        <th>
                            <%= key %>
                            <button class="btn btn-sm btn-secondary sort-btn" data-column="<%= key %>" data-order="asc">⬆</button>
                            <button class="btn btn-sm btn-secondary sort-btn" data-column="<%= key %>" data-order="desc">⬇</button>
                        </th>
                    <% }); %>
                </tr>
            </thead>
            <tbody id="tableBody" class="table-info">
                <% file.data.forEach((row, index) => { %>
                    <tr id="row<%= index %>">
                        <% Object.values(row).forEach(value => { %>
                            <td><%= value %></td>
                        <% }); %>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>
</section>

<!-- Pagination -->
<div class="pagination-container d-flex justify-content-center">
    <ul class="pagination">
        <li class="page-item" id="prevPage">
            <a class="page-link" href="#" aria-label="Previous">Previous</a>
        </li>
        <% for(let i = 1; i <= Math.ceil(file.data.length / 100); i++) { %>
            <li class="page-item">
                <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
            </li>
        <% } %>
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">Next</a>
        </li>
    </ul>
</div>

<!-- Chart Section -->
<section>
    <div class="container mt-5">
        <h3>Select a column to display in chart</h3>
        <select id="columnSelector" class="form-select mb-3">
            <% Object.keys(file.data[0]).forEach((key, index) => { %>
                <option value="<%= index %>"><%= key %></option>
            <% }); %>
        </select>
        <div id="chart_div" style="width: 100%; height: 500px;"></div>
    </div>
</section>

<script>
    google.charts.load('current', {packages: ['corechart', 'bar']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        const columnSelector = document.getElementById("columnSelector");
        const selectedColumnIndex = parseInt(columnSelector.value) + 1;
        const columnHeader = columnSelector.options[columnSelector.selectedIndex].text;

        const data = new google.visualization.DataTable();
        data.addColumn('string', 'Value');
        data.addColumn('number', 'Frequency');

        const rows = [];
        const rowCount = {};

        document.querySelectorAll("#tableBody tr").forEach((row) => {
            const value = row.querySelector(`td:nth-child(${selectedColumnIndex})`).innerText;
            if (!isNaN(parseFloat(value))) {
                if (rows.length === 0) {
                    data.addColumn('string', 'Index');
                    data.addColumn('number', columnHeader);
                }
                rows.push([String(rows.length), parseFloat(value)]);
            } else {
                rowCount[value] = (rowCount[value] || 0) + 1;
            }
        });

        if (rows.length > 0) {
            data.addRows(rows);
            const options = {
                title: `Chart for ${columnHeader}`,
                hAxis: {
                    title: columnHeader,
                    minValue: 0,
                },
                vAxis: {
                    title: 'Index'
                },
                legend: { position: 'none' }
            };
            const chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
            chart.draw(data, options);
        } else {
            const frequencyData = [];
            for (const key in rowCount) {
                frequencyData.push([key, rowCount[key]]);
            }
            data.addRows(frequencyData);
            const options = {
                title: `Frequency Chart for ${columnHeader}`,
                legend: { position: 'none' }
            };
            const chart = new google.visualization.BarChart(document.getElementById('chart_div'));
            chart.draw(data, options);
        }
    }

    document.getElementById("columnSelector").addEventListener("change", drawChart);

    // Sorting functionality
    document.querySelectorAll(".sort-btn").forEach(button => {
        button.addEventListener("click", function() {
            const column = this.getAttribute("data-column");
            const order = this.getAttribute("data-order");
            const columnIndex = Array.from(document.querySelectorAll("th")).findIndex(th => th.textContent.trim().startsWith(column)) + 1;
            const rows = Array.from(document.querySelectorAll("#tableBody tr"));
            const sortedRows = rows.sort((a, b) => {
                const aText = a.querySelector(`td:nth-child(${columnIndex})`).innerText;
                const bText = b.querySelector(`td:nth-child(${columnIndex})`).innerText;

                if (!isNaN(aText) && !isNaN(bText)) {
                    return (order === "asc" ? aText - bText : bText - aText);
                } else {
                    return order === "asc" ? aText.localeCompare(bText) : bText.localeCompare(aText);
                }
            });
            const tableBody = document.getElementById("tableBody");
            tableBody.innerHTML = "";
            sortedRows.forEach(row => tableBody.appendChild(row));
        });
    });

    document.getElementById("searchInput").addEventListener("keyup", function() {
        const value = this.value.toLowerCase();
        const rows = document.querySelectorAll("#tableBody tr");
        rows.forEach(row => {
            let found = false;
            row.querySelectorAll("td").forEach(cell => {
                if (cell.textContent.toLowerCase().includes(value)) {
                    found = true;
                }
            });
            row.style.display = found ? "" : "none";
        });
    });

    let currentPage = 1;

    // Initial page load
    showPage(currentPage);

    // Pagination links
    document.querySelectorAll(".pagination-container .page-link").forEach(link => {
        link.addEventListener("click", function(event) {
            event.preventDefault();
            const page = parseInt(this.getAttribute("data-page"));
            currentPage = page;
            showPage(currentPage);
        });
    });

    // Previous page
    document.getElementById("prevPage").addEventListener("click", function(event) {
        event.preventDefault();
        if (currentPage > 1) {
            currentPage--;
            showPage(currentPage);
        }
    });

    // Next page
    document.getElementById("nextPage").addEventListener("click", function(event) {
        event.preventDefault();
        const totalPages = document.querySelectorAll(".pagination-container .page-link").length;
        if (currentPage < totalPages) {
            currentPage++;
            showPage(currentPage);
        }
    });

    function showPage(page) {
        const rows = document.querySelectorAll("#tableBody tr");
        const totalPages = Math.ceil(rows.length / 100);

        // Update active page link
        document.querySelectorAll(".pagination-container .page-item").forEach(item => {
            item.classList.remove("active");
        });
        document.querySelector(`.pagination-container .page-link[data-page="${page}"]`).parentNode.classList.add("active");

        // Update Previous and Next buttons
        document.getElementById("prevPage").style.display = page === 1 ? "none" : "";
        document.getElementById("nextPage").style.display = page === totalPages ? "none" : "";

        const startIndex = (page - 1) * 100;
        const endIndex = startIndex + 100;
        rows.forEach((row, index) => {
            if (index >= startIndex && index < endIndex) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }
</script>
</body>
</html>
